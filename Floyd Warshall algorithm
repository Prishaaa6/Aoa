def floyd_warshall(graph):
    V = len(graph)
    dist = [[float('inf')] * V for _ in range(V)]
    for i in range(V):
        for j in range(V):
            if i == j:
                dist[i][j] = 0
            elif graph[i][j] != 0:
                dist[i][j] = graph[i][j]
    for k in range(V):
        for i in range(V):
            for j in range(V):
                if dist[i][k] + dist[k][j] < dist[i][j]:
                    dist[i][j] = dist[i][k] + dist[k][j]

    return dist
n = int(input("Enter number of vertices: "))
print("Enter adjacency matrix row-wise (use 0 for no edge):")
graph = []
for _ in range(n):
    row = list(map(int, input().split()))
    graph.append(row)
result = floyd_warshall(graph)
print("\nAll Pairs Shortest Distances:")
for i in range(n):
    for j in range(n):
        if result[i][j] == float('inf'):
            print("INF", end="\t")
        else:
            print(result[i][j], end="\t")
    print()
